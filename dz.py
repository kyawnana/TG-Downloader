#its a basic base64 encryption by DEMONIC'S ZONE 
import base64
exec(base64.b64decode("import os
import sys
import time
import zipfile
from telethon.sync import TelegramClient
from telethon.tl.types import (
    MessageMediaPhoto, DocumentAttributeFilename
)
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.messages import GetHistoryRequest
from telethon.errors import ChannelPrivateError
from rich import print
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, IntPrompt
from rich.table import Table
from rich.progress import Progress, BarColumn, TextColumn, DownloadColumn, TransferSpeedColumn, TimeRemainingColumn

api_id = 26160948
api_hash = "41c6099e73ca330698e115b017792628"

console = Console()


def telegram_login(phone):
    session_name = phone.replace("+", "").replace(" ", "").strip()
    client = TelegramClient(session_name, api_id, api_hash)
    client.connect()
    if not client.is_user_authorized():
        client.send_code_request(phone)
        code = Prompt.ask("[bold magenta]🔐 Enter the Telegram login code")
        try:
            client.sign_in(phone, code)
        except Exception as e:
            if "Two-steps verification is enabled" in str(e):
                pwd = Prompt.ask("[bold yellow]🔒 Enter your 2FA password")
                try:
                    client.check_password(pwd)
                except Exception as e2:
                    console.print(f"[red]❌ 2FA password incorrect or login failed: {e2}")
                    client.disconnect()
                    sys.exit(1)
            else:
                console.print(f"[red]Failed to sign in: {e}")
                client.disconnect()
                sys.exit(1)
    return client


def file_matches(message, selected_media):
    if selected_media == 'all':
        return bool(message.media)
    if isinstance(message.media, MessageMediaPhoto):
        return selected_media in ['jpg', 'jpeg', 'png', 'gif']
    if hasattr(message.media, 'document') and message.media.document:
        attrs = message.media.document.attributes
        for attr in attrs:
            if isinstance(attr, DocumentAttributeFilename):
                ext = os.path.splitext(attr.file_name)[-1].lower().replace('.', '')
                return ext == selected_media
    return False


def show_channel_info(client, chat_name):
    try:
        entity = client.get_entity(chat_name)
        full = client(GetFullChannelRequest(channel=entity))
        channel = full.chats[0]
        channel_type = "🔒 Private" if channel.megagroup or (channel.broadcast and not channel.username) else "🌐 Public"
        members = full.full_chat.participants_count
        history = client(GetHistoryRequest(
            peer=entity,
            limit=1,
            offset_date=None,
            offset_id=0,
            max_id=0,
            min_id=0,
            add_offset=0,
            hash=0
        ))
        total_posts = history.count
        table = Table(title=f"[bold cyan]📊 Channel Information: {channel.title}")
        table.add_column("Property", style="bold blue")
        table.add_column("Value", style="green")
        table.add_row("Channel Type", channel_type)
        table.add_row("Members/Subscribers", str(members))
        table.add_row("Total Posts", str(total_posts))
        console.print(table)
        return entity, total_posts, channel.title
    except ChannelPrivateError:
        console.print("[red bold]❌ The channel is private or access denied.")
        return None, 0, None
    except Exception as e:
        console.print(f"[red]⚠️ Error retrieving channel info: {e}")
        return None, 0, None


def zip_folder(folder_path):
    zip_name = f"{folder_path}.zip"
    with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, _, files in os.walk(folder_path):
            for file in files:
                abs_path = os.path.join(root, file)
                rel_path = os.path.relpath(abs_path, folder_path)
                zipf.write(abs_path, rel_path)
    return zip_name


def open_url(url):
    # Use xdg-open for Linux (works on most distros)
    try:
        os.system(f"xdg-open '{url}'")
    except Exception:
        console.print(f"[red]❌ Could not open {url} automatically. Please open it manually.")


def main():
    console.print(Panel.fit("[bold magenta]📥 TELEGRAM CLOUD MEDIA DOWNLOADER", style="bold cyan"), justify="center")

    # Redirect user to join channel
    redirect_link = "https://t.me/+Uusns9qZHtw2OWQ1"
    console.print(f"[bold blue]🌐 Redirecting you to join channel: [underline]{redirect_link}[/underline]")
    time.sleep(1)
    open_url(redirect_link)

    joined = Prompt.ask("[bold green]✅ Have you joined the channel? (yes/no)").strip().lower()
    if joined != 'yes':
        console.print("[red]Please join the channel to continue.")
        sys.exit(0)

    need_pass = Prompt.ask("[bold yellow]Now need the password? Write Y for pass").strip().lower()
    if need_pass != 'y':
        console.print("[red]Password is required to proceed. Exiting.")
        sys.exit(0)

    pass_channel_link = "https://t.me/c/2598647977/138"
    console.print(f"[bold blue]🌐 Redirecting you to: [underline]{pass_channel_link}[/underline] for password input.")
    open_url(pass_channel_link)

    password = Prompt.ask("[bold magenta]🔐 Enter password")
    if password != "dzdemonic":
        console.print("[red bold]❌ Incorrect password! Exiting.")
        sys.exit(0)

    phone = Prompt.ask("[bold blue]📱 Enter your phone number (used as session name)")
    client = telegram_login(phone)

    chat_name = Prompt.ask("[bold blue]💬 Enter chat/channel username or 'me' for saved messages")

    entity, total_posts, channel_title = show_channel_info(client, chat_name)
    if total_posts == 0 or entity is None:
        console.print("[red]No posts or invalid channel. Exiting.")
        client.disconnect()
        sys.exit(0)

    output_dir = Prompt.ask(f"[bold blue]📁 Folder to save files (press enter for default '{channel_title}')").strip()
    if not output_dir:
        output_dir = channel_title or "downloads"
    output_dir = "".join(c for c in output_dir if c.isalnum() or c in " _-").rstrip()
    os.makedirs(output_dir, exist_ok=True)

    media_types = [
        'mp3', 'mp4', 'doc', 'txt', 'py', 'html', 'php', 'css', 'gif',
        'jpg', 'jpeg', 'png', 'zip', 'js', 'json', 'avi', 'mkv', 'flac',
        'wav', 'mov', 'all'
    ]
    table = Table(title="🎞 Select Media Type", show_header=True, header_style="bold green")
    table.add_column("Option", style="bold cyan")
    table.add_column("Type", style="white")
    for i, m in enumerate(media_types, 1):
        table.add_row(str(i), m)
    console.print(table)

    m_choice = IntPrompt.ask(f"[bold blue]Enter media type option [1-{len(media_types)}]", default=len(media_types))
    selected_media = media_types[m_choice - 1]

    console.print(f"[bold green]Total posts available: {total_posts}")
    start = IntPrompt.ask("📤 Start from message #", default=1)
    end = IntPrompt.ask("📥 End at message #", default=total_posts)
    if end < start:
        start, end = end, start

    count = 0
    with Progress(
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        DownloadColumn(),
        TransferSpeedColumn(),
        TimeRemainingColumn(),
    ) as progress:
        messages = client.iter_messages(chat_name, min_id=start - 1, max_id=end + 1, reverse=True)
        for msg in messages:
            if msg.media and file_matches(msg, selected_media):
                try:
                    filename = f"msg{msg.id}"
                    task = progress.add_task(f"[cyan]⬇ Downloading {filename}", total=1)

                    def callback(current, total):
                        if total != 0:
                            progress.update(task, completed=current, total=total)

                    result = client.download_media(msg, file=output_dir, progress_callback=callback)
                    if result:
                        console.print(f"[green]✅ Downloaded: {os.path.basename(result)}")
                        count += 1
                    else:
                        console.print(f"[red]❌ Failed to download from message ID {msg.id}")

                    progress.remove_task(task)
                except Exception as e:
                    console.print(f"[red]⚠️ Error on message {msg.id}: {e}")

    client.disconnect()

    if count > 0:
        console.print(Panel(f"[bold green]✅ Done! Downloaded {count} file(s) to '{output_dir}'", expand=False))
        zip_name = zip_folder(output_dir)
        console.print(f"[bold magenta]📦 Folder compressed to: {zip_name}")
    else:
        console.print("[yellow]No files were downloaded.")

    console.print("[bold cyan]Thanks for using the Telegram Media Downloader! 🙌")


if __name__ == "__main__":
    main()
").decode('utf-8'))
